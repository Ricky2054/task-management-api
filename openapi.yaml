openapi: 3.0.3
info:
  title: Task Management API
  description: A comprehensive task management system with CRUD operations, filtering, and statistics
  version: 1.0.0
  contact:
    name: Task Management API Support
    email: support@taskmanagement.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.taskmanagement.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check if the API server is running and healthy
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Server is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Task Management API is running"
                  timestamp:
                    type: string
                    format: date-time
                  environment:
                    type: string
                    example: "development"

  /api:
    get:
      summary: API information
      description: Get API version and available endpoints
      operationId: getApiInfo
      tags:
        - Info
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Task Management API"
                  version:
                    type: string
                    example: "1.0.0"
                  endpoints:
                    type: object
                  documentation:
                    type: string

  /api/tasks:
    get:
      summary: Get all tasks
      description: Retrieve all tasks with optional filtering, pagination, and search
      operationId: getAllTasks
      tags:
        - Tasks
      parameters:
        - name: status
          in: query
          description: Filter by task status
          required: false
          schema:
            type: string
            enum: [pending, in-progress, completed, cancelled]
        - name: priority
          in: query
          description: Filter by task priority
          required: false
          schema:
            type: string
            enum: [low, medium, high, urgent]
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: sort
          in: query
          description: Field to sort by
          required: false
          schema:
            type: string
            enum: [title, status, priority, createdAt, updatedAt, dueDate]
            default: createdAt
        - name: order
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: search
          in: query
          description: Search in title and description
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  count:
                    type: integer
                    description: Number of tasks in current page
                  total:
                    type: integer
                    description: Total number of tasks
                  currentPage:
                    type: integer
                  totalPages:
                    type: integer
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Create a new task
      description: Create a new task with the provided information
      operationId: createTask
      tags:
        - Tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Task created successfully"
                  data:
                    $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/stats:
    get:
      summary: Get task statistics
      description: Get aggregated statistics about tasks
      operationId: getTaskStats
      tags:
        - Tasks
        - Statistics
      responses:
        '200':
          description: Task statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      statusStats:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            count:
                              type: integer
                            avgPriority:
                              type: number
                      priorityStats:
                        type: array
                        items:
                          type: object
                          properties:
                            _id:
                              type: string
                            count:
                              type: integer
                      totalTasks:
                        type: integer
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/{id}:
    get:
      summary: Get a single task
      description: Retrieve a specific task by its ID
      operationId: getTask
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update a task
      description: Update an existing task with new information
      operationId: updateTask
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Task updated successfully"
                  data:
                    $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete a task
      description: Delete an existing task
      operationId: deleteTask
      tags:
        - Tasks
      parameters:
        - name: id
          in: path
          required: true
          description: Task ID
          schema:
            type: string
            pattern: '^[0-9a-fA-F]{24}$'
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Task deleted successfully"
                  data:
                    type: object
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Task:
      type: object
      properties:
        _id:
          type: string
          description: Unique identifier for the task
          example: "60f1b2b3c4e5f6a7b8c9d0e1"
        title:
          type: string
          description: Task title
          minLength: 3
          maxLength: 100
          example: "Complete project documentation"
        description:
          type: string
          description: Task description
          minLength: 10
          maxLength: 500
          example: "Write comprehensive documentation for the API including examples and usage"
        status:
          type: string
          enum: [pending, in-progress, completed, cancelled]
          default: pending
          example: "in-progress"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          default: medium
          example: "high"
        dueDate:
          type: string
          format: date-time
          description: Due date for the task (must be in the future)
          example: "2024-12-31T23:59:59.000Z"
        tags:
          type: array
          items:
            type: string
          description: Array of tags associated with the task
          example: ["documentation", "api", "urgent"]
        createdAt:
          type: string
          format: date-time
          description: Task creation timestamp
          example: "2024-01-15T10:30:00.000Z"
        updatedAt:
          type: string
          format: date-time
          description: Task last update timestamp
          example: "2024-01-15T15:45:00.000Z"
        ageInDays:
          type: integer
          description: Virtual field showing task age in days
          example: 5
        daysUntilDue:
          type: integer
          nullable: true
          description: Virtual field showing days until due date
          example: 10
      required:
        - _id
        - title
        - description
        - status
        - priority
        - createdAt
        - updatedAt

    TaskInput:
      type: object
      properties:
        title:
          type: string
          description: Task title
          minLength: 3
          maxLength: 100
          example: "Complete project documentation"
        description:
          type: string
          description: Task description
          minLength: 10
          maxLength: 500
          example: "Write comprehensive documentation for the API including examples and usage"
        status:
          type: string
          enum: [pending, in-progress, completed, cancelled]
          default: pending
          example: "pending"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          default: medium
          example: "medium"
        dueDate:
          type: string
          format: date-time
          description: Due date for the task (must be in the future)
          example: "2024-12-31T23:59:59.000Z"
        tags:
          type: array
          items:
            type: string
          description: Array of tags associated with the task
          example: ["documentation", "api"]
      required:
        - title
        - description

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          description: Task title
          minLength: 3
          maxLength: 100
          example: "Complete project documentation"
        description:
          type: string
          description: Task description
          minLength: 10
          maxLength: 500
          example: "Write comprehensive documentation for the API including examples and usage"
        status:
          type: string
          enum: [pending, in-progress, completed, cancelled]
          example: "in-progress"
        priority:
          type: string
          enum: [low, medium, high, urgent]
          example: "high"
        dueDate:
          type: string
          format: date-time
          description: Due date for the task (must be in the future)
          example: "2024-12-31T23:59:59.000Z"
        tags:
          type: array
          items:
            type: string
          description: Array of tags associated with the task
          example: ["documentation", "api", "urgent"]

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
          example: "An error occurred"
        error:
          type: string
          description: Detailed error information
        stack:
          type: string
          description: Error stack trace (only in development)

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Validation error"
            error: "Title must be at least 3 characters long"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Task not found with id: 60f1b2b3c4e5f6a7b8c9d0e1"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Internal server error"

tags:
  - name: Health
    description: Health check endpoints
  - name: Info
    description: API information endpoints
  - name: Tasks
    description: Task management operations
  - name: Statistics
    description: Task statistics and analytics 